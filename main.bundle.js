(()=>{"use strict";var n={800:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #f04405;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 130px;\n}\n\n#copy-logs-button {\n  border: 1px solid #f04405;\n  background: transparent;\n  color: #f04405;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #f0470a;\n}\n\n.result-table {\n  line-height: 20px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n\n  .result-table {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n","",{version:3,sources:["webpack://./playground/style.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,iBAAiB;EACjB,UAAU;EACV,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;;EAEE,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,wBAAwB;EACxB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,cAAc;AAChB;;AAEA;EACE,OAAO;EACP,eAAe;EACf,aAAa;EACb,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,mBAAmB;EACnB,yCAAyC;EACzC,oBAAoB;EACpB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE;IACE,gBAAgB;EAClB;;EAEA;;IAEE,qBAAqB;EACvB;;EAEA;IACE,cAAc;IACd,eAAe;EACjB;AACF",sourcesContent:["body {\n  width: 100%;\n  min-height: 100vh;\n  padding: 0;\n  margin: 0;\n  font-family: sans-serif;\n}\n\n.logo_ref {\n  margin-top: 20px;\n  width: max-content;\n}\n\n.logo {\n  width: 300px;\n  height: auto;\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.buttons-container {\n  display: flex;\n  gap: 1.2em;\n  padding: 16px 0px;\n}\n\n.button {\n  width: fit-content;\n  border: none;\n  background: #f04405;\n  color: #fff;\n  font: inherit;\n  font-size: 88%;\n  font-weight: 600;\n  line-height: 1.2;\n  border-radius: 10px;\n  cursor: pointer;\n  margin: 0;\n  padding: 0.85em 1.7em;\n  text-align: center;\n  outline: none;\n  max-width: 130px;\n}\n\n#copy-logs-button {\n  border: 1px solid #f04405;\n  background: transparent;\n  color: #f04405;\n}\n\n.output_holder {\n  flex: 1;\n  min-height: 4em;\n  height: 100vh;\n  position: relative;\n  margin: 20px 0px;\n}\n\n.output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  background: #282c34;\n  box-shadow: 0 0 1.25em rgba(0, 0, 0, 0.2);\n  border-radius: 0.7em;\n  padding: 1em 1.25em;\n  overflow: auto;\n}\n\n.output_div {\n  color: white;\n  margin: 10px;\n  white-space: pre-wrap;\n}\n\nh5 {\n  margin: 10px;\n  color: #f0470a;\n}\n\n.result-table {\n  line-height: 20px;\n}\n\n.green {\n  color: green;\n}\n\n.red {\n  color: orangered;\n}\n\n@media (max-width: 1024px) {\n  body {\n    font-size: small;\n  }\n\n  h1,\n  h2 {\n    margin: 10px 0 10px 0;\n  }\n\n  .result-table {\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n"],sourceRoot:""}]);const u=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var c=this[u][0];null!=c&&(a[c]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],u=0;u<n.length;u++){var c=n[u],s=r.base?c[0]+r.base:c[0],d=i[s]||0,l="".concat(s," ").concat(d);i[s]=d+1;var f=t(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(p);else{var A=o(p,r);r.byIndex=u,e.splice(u,0,{identifier:l,updater:A,references:1})}a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var u=t(i[a]);e[u].references--}for(var c=r(n,o),s=0;s<i.length;s++){var d=t(i[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(n,e,t,r){return new(t||(t=Promise))((function(o,i){function a(n){try{c(r.next(n))}catch(n){i(n)}}function u(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,u)}c((r=r.apply(n,e||[])).next())}))}function r(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}Object.create,Object.create;var o,i;!function(n){n[n.Unexpected=-100]="Unexpected",n[n.Undefined=-1]="Undefined",n[n.Success=1]="Success",n[n.Null=101]="Null",n[n.UnexpectedBehaviour=102]="UnexpectedBehaviour",n[n.NotFunction=104]="NotFunction"}(o||(o={})),function(n){n.Unknown="unknown",n.HeadlessChrome="headless_chrome",n.PhantomJS="phantomjs",n.Nightmare="nightmare",n.Selenium="selenium",n.Electron="electron",n.Rhino="rhino",n.CouchJS="couchjs",n.Sequentum="sequentum",n.SlimerJS="slimerjs",n.CefSharp="cefsharp"}(i||(i={}));var a,u,c=function(e){function t(n,r){var o=e.call(this,r)||this;return o.state=n,o.name="BotdError",Object.setPrototypeOf(o,t.prototype),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t}(Error);function s(n){var e=n.appVersion;return e.state===o.Success&&(/headless/i.test(e.value)?i.HeadlessChrome:/electron/i.test(e.value)?i.Electron:/slimerjs/i.test(e.value)?i.SlimerJS:void 0)}function d(n,e){return-1!==n.indexOf(e)}function l(n,e){return-1!==n.indexOf(e)}function f(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t],t,n))return n[t]}function p(n){return Object.getOwnPropertyNames(n)}function A(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var r=function(e){if("string"==typeof e){if(d(n,e))return{value:!0}}else if(null!=f(n,(function(n){return e.test(n)})))return{value:!0}},o=0,i=e;o<i.length;o++){var a=i[o],u=r(a);if("object"==typeof u)return u.value}return!1}function m(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}function v(n){var e=n.documentAttributes;return e.state===o.Success&&(A(e.value,"selenium","webdriver","driver")?i.Selenium:void 0)}function h(n){var e=n.documentProps;return e.state===o.Success&&(A(e.value,"selenium","__fxdriver_unwrapped","__selenium_unwrapped","__webdriver_evaluate","__driver_evaluate","__webdriver_unwrapped","__driver_unwrapped","__selenium_evaluate","__webdriver_script_function","__webdriver_script_func","__webdriver_script_fn","__fxdriver_evaluate","__webdriverFunc","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw","selenium-evaluate","_Selenium_IDE_Recorder",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/)?i.Selenium:void 0)}function g(n){var e=n.errorTrace;return e.state===o.Success&&(/PhantomJS/i.test(e.value)?i.PhantomJS:void 0)}function w(){var n,e,t=window,r=navigator;return m(["webkitPersistentStorage"in r,"webkitTemporaryStorage"in r,0===r.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?a.Chromium:m(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===r.vendor.indexOf("Apple"),"getStorageUpdates"in r,"WebKitMediaKeys"in t])>=4?a.Webkit:m(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?a.Gecko:a.Unknown}function b(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return l(e,"wechat")?u.WeChat:l(e,"firefox")?u.Firefox:l(e,"opera")||l(e,"opr")?u.Opera:l(e,"chrome")?u.Chrome:l(e,"safari")?u.Safari:l(e,"trident")||l(e,"msie")?u.IE:u.Unknown}function C(){var n=w(),e=n===a.Chromium,t=n===a.Gecko;if(!e&&!t)return!1;var r=window;return m(["onorientationchange"in r,"orientation"in r,e&&!("SharedWorker"in r),t&&/android/i.test(navigator.appVersion)])>=2}function E(){if(w()!==a.Webkit)return!1;var n=window;return m(["safari"in n,!("DeviceMotionEvent"in n),!("ongestureend"in n),!("standalone"in navigator)])>=3}function y(){if(void 0===window.CSS)throw new c(o.Undefined,"window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function x(){return void 0!==document.hasFocus&&document.hasFocus()}function B(n){var e=n.evalLength;if(e.state===o.Success){var t=e.value,r=b();return 37===t&&!d([u.Firefox,u.Safari],r)||39===t&&!d([u.IE],r)||33===t&&!d([u.Chrome,u.Opera,u.WeChat],r)}}function S(n){if(n.functionBind.state===o.NotFunction)return i.PhantomJS}function _(n){var e=n.languages;if(e.state===o.Success&&0===e.value.length)return i.HeadlessChrome}function k(n){var e=n.mimeTypesConsistent;if(e.state===o.Success&&!e.value)return i.Unknown}function P(n){var e=n.notificationPermissions;return b()===u.Chrome&&(e.state===o.Success&&e.value?i.HeadlessChrome:void 0)}function U(n){var e=n.pluginsArray;if(e.state===o.Success&&!e.value)return i.HeadlessChrome}function O(n){var e=n.pluginsLength;if(e.state===o.Success){var t=b();if(!(w()===a.Chromium&&C()||t===u.Safari&&!E()))return 0===e.value?i.HeadlessChrome:void 0}}function T(n){var e,t=n.process;return t.state===o.Success&&("renderer"===t.value.type||null!=(null===(e=t.value.versions)||void 0===e?void 0:e.electron)?i.Electron:void 0)}function I(n){var e=n.productSub;if(e.state!==o.Success)return!1;var t=b();return t!==u.Chrome&&t!==u.Safari&&t!==u.Opera&&t!==u.WeChat||"20030107"===e.value?void 0:i.Unknown}function N(n){var e=n.rtt;if(e.state===o.Success&&!C())return 0===e.value?i.HeadlessChrome:void 0}function j(n){var e=n.userAgent;return e.state===o.Success&&(/PhantomJS/i.test(e.value)?i.PhantomJS:/Headless/i.test(e.value)?i.HeadlessChrome:/Electron/i.test(e.value)?i.Electron:/slimerjs/i.test(e.value)?i.SlimerJS:void 0)}function R(n){var e=n.webDriver;if(e.state===o.Success&&e.value)return i.HeadlessChrome}function W(n){var e=n.webGL;if(e.state===o.Success){var t=e.value,r=t.vendor,a=t.renderer;if("Brian Paul"==r&&"Mesa OffScreen"==a)return i.HeadlessChrome}}function L(n){var e=n.windowExternal;return e.state===o.Success&&(/Sequentum/i.test(e.value)?i.Sequentum:void 0)}function M(n){var e=n.windowProps;return e.state===o.Success&&(A(e.value,"webdriver","domAutomation","domAutomationController")?i.HeadlessChrome:A(e.value,"_selenium","_Selenium_IDE_Recorder","callSelenium")?i.Selenium:A(e.value,"callPhantom","_phantom","phantom")?i.PhantomJS:A(e.value,"__nightmare")?i.Nightmare:A(e.value,"emit")?i.CouchJS:A(e.value,"spawn")?i.Rhino:A(e.value,"CefSharp")?i.CefSharp:void 0)}function D(n){var e=n.windowSize;if(e.state!==o.Success)return!1;var t=e.value,r=t.outerWidth,a=t.outerHeight;return x()&&0===r&&0===a?i.HeadlessChrome:void 0}function F(){var n=navigator.appVersion;if(null==n)throw new c(o.Undefined,"navigator.appVersion is undefined");return n}function H(){if(void 0===document.documentElement)throw new c(o.Undefined,"document.documentElement is undefined");return Array.from(document.documentElement.attributes).map((function(n){return n.name}))}function z(){if(void 0===window.document)throw new c(o.Undefined,"window.document is undefined");return p(window.document)}function J(){try{null[0]()}catch(n){if(n instanceof Error&&null!=n.stack)return n.stack.toString()}throw new c(o.UnexpectedBehaviour,"errorTrace signal unexpected behaviour")}function Y(){return eval.toString().length}function q(){if(void 0===Function.prototype.bind)throw new c(o.NotFunction,"Function.prototype.bind is undefined");return Function.prototype.bind.toString()}function G(){return Object.assign([],navigator.languages)}function V(){if(void 0===navigator.mimeTypes)throw new c(o.Undefined,"navigator.mimeTypes is undefined");for(var n=navigator.mimeTypes,e=Object.getPrototypeOf(n)===MimeTypeArray.prototype,t=0;t<n.length;t++)e&&(e=Object.getPrototypeOf(n[t])===MimeType.prototype);return e}function Z(){if(void 0===window.Notification)throw new c(o.Undefined,"window.Notification is undefined");if(void 0===navigator.permissions)throw new c(o.Undefined,"navigator.permissions is undefined");if("function"!=typeof navigator.permissions.query)throw new c(o.NotFunction,"navigator.permissions.query is not a function");return new Promise((function(n){navigator.permissions.query({name:"notifications"}).then((function(e){"denied"===Notification.permission&&"prompt"===e.state?n(!0):n(!1)}))}))}function K(){if(void 0===navigator.plugins)throw new c(o.Undefined,"navigator.plugins is undefined");if(void 0===window.PluginArray)throw new c(o.Undefined,"window.PluginArray is undefined");return navigator.plugins instanceof PluginArray}function X(){if(void 0===navigator.plugins)throw new c(o.Undefined,"navigator.plugins is undefined");return navigator.plugins.length}function $(){if(void 0===window.process)throw new c(o.Undefined,"window.process is undefined");return window.process}function Q(){var n=navigator.productSub;if(void 0===n)throw new c(o.Undefined,"navigator.productSub is undefined");return n}function nn(){if(void 0===navigator.connection)throw new c(o.Undefined,"navigator.connection is undefined");if(void 0===navigator.connection.rtt)throw new c(o.Undefined,"navigator.connection.rtt is undefined");return navigator.connection.rtt}function en(){return navigator.userAgent}function tn(){if(null==navigator.webdriver)throw new c(o.Undefined,"navigator.webdriver is undefined");return navigator.webdriver}function rn(){var n=document.createElement("canvas");if("function"!=typeof n.getContext)throw new c(o.NotFunction,"HTMLCanvasElement.getContext is not a function");var e=n.getContext("webgl");if(null===e)throw new c(o.Null,"WebGLRenderingContext is null");if("function"!=typeof e.getParameter)throw new c(o.NotFunction,"WebGLRenderingContext.getParameter is not a function");return{vendor:e.getParameter(e.VENDOR),renderer:e.getParameter(e.RENDERER)}}function on(){if(void 0===window.external)throw new c(o.Undefined,"window.external is undefined");var n=window.external;if("function"!=typeof n.toString)throw new c(o.NotFunction,"window.external.toString is not a function");return n.toString()}function an(){return p(window)}function un(){return{outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight}}!function(n){n.Unknown="unknown",n.Chromium="chromium",n.Gecko="gecko",n.Webkit="webkit"}(a||(a={})),function(n){n.Unknown="unknown",n.Chrome="chrome",n.Firefox="firefox",n.Opera="opera",n.Safari="safari",n.IE="internet_explorer",n.WeChat="wechat"}(u||(u={}));const cn=function(){function n(){this.components=void 0,this.detections=void 0}return n.prototype.getComponents=function(){return this.components},n.prototype.getDetections=function(){return this.detections},n.prototype.getSources=function(){return{userAgent:en,appVersion:F,rtt:nn,windowSize:un,pluginsLength:X,pluginsArray:K,errorTrace:J,productSub:Q,windowExternal:on,mimeTypesConsistent:V,evalLength:Y,webGL:rn,webDriver:tn,languages:G,notificationPermissions:Z,documentAttributes:H,functionBind:q,process:$,documentProps:z,windowProps:an}},n.prototype.getDetectors=function(){return{detectAppVersion:s,detectDocumentAttributes:v,detectDocumentProperties:h,detectErrorTrace:g,detectEvalLengthInconsistency:B,detectFunctionBind:S,detectLanguagesLengthInconsistency:_,detectPermissions:P,detectPluginsArray:U,detectPluginsLengthInconsistency:O,detectProcess:T,detectRTT:N,detectUserAgent:j,detectWebDriver:R,detectWebGL:W,detectWindowExternal:L,detectWindowProperties:M,detectWindowSize:D,detectMimeTypesConsistent:k,detectProductSub:I}},n.prototype.detect=function(){if(void 0===this.components)throw new Error("BotDetector.detect can't be called before BotDetector.collect");var n=this.components,e=this.getDetectors(),t={},r={bot:!1};for(var o in e){var a=(0,e[o])(n),u={bot:!1};"string"==typeof a?u={bot:!0,botKind:a}:a&&(u={bot:!0,botKind:i.Unknown}),t[o]=u,u.bot&&(r=u)}return this.detections=t,r},n.prototype.collect=function(){return e(this,void 0,void 0,(function(){var n,t,i,a=this;return r(this,(function(u){switch(u.label){case 0:return n=this.getSources(),t={},i=Object.keys(n),[4,Promise.all(i.map((function(i){return e(a,void 0,void 0,(function(){var e,a,u,s,d;return r(this,(function(r){switch(r.label){case 0:e=n[i],r.label=1;case 1:return r.trys.push([1,3,,4]),a=t,u=i,d={},[4,e()];case 2:return a[u]=(d.value=r.sent(),d.state=o.Success,d),[3,4];case 3:return s=r.sent(),t[i]=s instanceof c?{state:s.state,error:"".concat(s.name,": ").concat(s.message)}:{state:o.UnexpectedBehaviour,error:s instanceof Error?"".concat(s.name,": ").concat(s.message):String(s)},[3,4];case 4:return[2]}}))}))})))];case 1:return u.sent(),this.components=t,[2,this.components]}}))}))},n}();function sn(n){var t=(void 0===n?{}:n).monitoring,o=void 0===t||t;return e(this,void 0,void 0,(function(){var n;return r(this,(function(e){switch(e.label){case 0:return o&&function(){if(!(window.__fpjs_d_m||Math.random()>=.001))try{var n=new XMLHttpRequest;n.open("get","https://m1.openfpcdn.io/botd/v".concat("0.1.24","/npm-monitoring"),!0),n.send()}catch(n){console.error(n)}}(),[4,(n=new cn).collect()];case 1:return e.sent(),[2,n]}}))}))}var dn=t(379),ln=t.n(dn),fn=t(795),pn=t.n(fn),An=t(569),mn=t.n(An),vn=t(565),hn=t.n(vn),gn=t(216),wn=t.n(gn),bn=t(589),Cn=t.n(bn),En=t(800),yn={};yn.styleTagTransform=Cn(),yn.setAttributes=hn(),yn.insert=mn().bind(null,"head"),yn.domAPI=pn(),yn.insertStyleElement=wn(),ln()(En.Z,yn),En.Z&&En.Z.locals&&En.Z.locals;var xn=void 0,Bn=function(){return e(void 0,void 0,void 0,(function(){var n,e,t,o,i,a,u,c,s,d,l,f,p,A,m,v,h,g,B,S,_,k,P;return r(this,(function(r){switch(r.label){case 0:n=document.getElementById("status"),e=document.getElementById("result-table"),t=document.getElementById("error_section"),o=document.getElementById("result_section"),i=document.getElementById("error"),a=document.getElementById("perf"),u=document.getElementById("time"),c=document.getElementById("sources"),s=document.getElementById("result"),d=document.getElementById("detailed-results"),l=document.getElementById("debug-data"),n.textContent="Loading...",e.innerHTML="",t.style.display="none",o.style.display="none",r.label=1;case 1:return r.trys.push([1,3,,4]),f=performance.now(),[4,sn()];case 2:return p=r.sent(),A=performance.now()-f,m=p.detect(),v=performance.now()-f,h=null!==(k=p.getComponents())&&void 0!==k?k:{},g=null!==(P=p.getDetections())&&void 0!==P?P:{},xn={timeToGetResults:A.toFixed(0)+" ms",timeToCollectSignals:v.toFixed(0)+" ms",detectionResult:m,collectedData:h,detailedResults:g},c.textContent=JSON.stringify(xn.collectedData,null,4),t.style.display="none",o.style.display="block",a.textContent=xn.timeToGetResults,u.textContent=xn.timeToCollectSignals,n.textContent="Result:",s.textContent=JSON.stringify(xn.detectionResult,null,4),d.textContent="Detailed results:",d.textContent=JSON.stringify(xn.detailedResults,null,4),B={browserEngineKind:w(),browserKind:b(),documentFocus:x(),mozAppearanceSupport:y(),isAndroid:C(),isDesktopSafari:E()},l.textContent="Debug data:",l.textContent=JSON.stringify(B,null,4),S=[[{text:"automationTool"},m.bot?{text:"<b>Detected</b>",class:"green"}:{text:"<b>Not detected</b>"},m.bot?{text:"<b>".concat(m.botKind,"</b>"),class:"green"}:null]],e.innerHTML=S.map((function(n){return"<tr>".concat(n.filter((function(n){return null!=n})).map((function(n){return'<td style="width: 25%" '.concat(null!=(null==n?void 0:n.class)?"class=".concat(n.class):"",">").concat(null==n?void 0:n.text,"</td>")})).join(""),"</tr>")})).join(""),[3,4];case 3:return _=r.sent(),o.style.display="none",t.style.display="block",n.textContent="Error!",i.textContent=JSON.stringify(_,null,4),[3,4];case 4:return[2]}}))}))};window.onload=function(){return e(void 0,void 0,void 0,(function(){return r(this,(function(n){return document.getElementById("detect-button").addEventListener("click",(function(){return Bn()})),document.getElementById("copy-logs-button").addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(xn)).then((function(){alert("Copied to clipboard")}))})),Bn(),[2]}))}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,